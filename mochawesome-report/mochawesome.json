{
  "stats": {
    "suites": 6,
    "tests": 25,
    "passes": 25,
    "pending": 0,
    "failures": 0,
    "start": "2021-05-10T01:59:01.592Z",
    "end": "2021-05-10T01:59:02.078Z",
    "duration": 486,
    "testsRegistered": 25,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "b3fea8f7-bf66-4976-beed-6877e833f11e",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "bb0deda3-1390-438e-bea3-666c0a931c41",
          "title": "suite",
          "fullFile": "/Users/zhoushuanghua/ZackProjects/Mocha/test/test.js",
          "file": "/test/test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"suite\"",
              "fullTitle": "suite \"before all\" hook in \"suite\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log('before suite')",
              "err": {},
              "uuid": "5ca2a65e-b2a1-484a-8b1d-2e887b42b04c",
              "parentUUID": "bb0deda3-1390-438e-bea3-666c0a931c41",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"suite\"",
              "fullTitle": "suite \"after all\" hook in \"suite\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log('after suite')",
              "err": {},
              "uuid": "6789ce38-4f25-4a4e-82aa-23183c47e142",
              "parentUUID": "bb0deda3-1390-438e-bea3-666c0a931c41",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "60d261e9-be69-474c-b954-be1543c73581",
              "title": "happy pass testing -- test",
              "fullFile": "/Users/zhoushuanghua/ZackProjects/Mocha/test/test.js",
              "file": "/test/test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "case1 - happy pass",
                  "fullTitle": "suite happy pass testing -- test case1 - happy pass",
                  "timedOut": false,
                  "duration": 59,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var bank = new Bank();\nDriver.call(bank,\n    (statusCode, response) => {\n        assert.strictEqual(statusCode, 200)\n        assert.strictEqual(response.success, \"Bank details saved\")\n    }, (err) => { err ? done(err) : done() }\n)",
                  "err": {},
                  "uuid": "cf0e654e-3a43-4237-b745-705629ec81f3",
                  "parentUUID": "60d261e9-be69-474c-b954-be1543c73581",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cf0e654e-3a43-4237-b745-705629ec81f3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 59,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6d158251-b122-4f81-930b-0eaa64178d86",
              "title": "mandatory testing -- test",
              "fullFile": "/Users/zhoushuanghua/ZackProjects/Mocha/test/test.js",
              "file": "/test/test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "case2 - missing bank_country_code",
                  "fullTitle": "suite mandatory testing -- test case2 - missing bank_country_code",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var bank = new Bank();\nbank.update((it) => {\n    delete it.bank_country_code\n})\nDriver.call(bank,\n    (statusCode, response) => {\n        assert.strictEqual(statusCode, 400)\n        assert.strictEqual(response.error, \"bank_country_code is required\")\n    }, (err) => { err ? done(err) : done() }\n)",
                  "err": {},
                  "uuid": "1fc10a13-18c6-4036-82ed-48b3e6e1bf7e",
                  "parentUUID": "6d158251-b122-4f81-930b-0eaa64178d86",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "case3 - missing account_name",
                  "fullTitle": "suite mandatory testing -- test case3 - missing account_name",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var bank = new Bank();\nbank.update((it) => {\n    delete it.account_name\n})\nDriver.call(bank,\n    (statusCode, response) => {\n        assert.strictEqual(statusCode, 400)\n        assert.strictEqual(response.error, \"account_name is required\")\n    }, (err) => { err ? done(err) : done() }\n)",
                  "err": {},
                  "uuid": "8838eb2a-09ed-43c4-918e-acbe2de5d7fe",
                  "parentUUID": "6d158251-b122-4f81-930b-0eaa64178d86",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "case4 - missing account_number",
                  "fullTitle": "suite mandatory testing -- test case4 - missing account_number",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var bank = new Bank();\nbank.update((it) => {\n    delete it.account_number\n})\nDriver.call(bank,\n    (statusCode, response) => {\n        assert.strictEqual(statusCode, 400)\n        assert.strictEqual(response.error, \"account_number is required\")\n    }, (err) => { err ? done(err) : done() }\n)",
                  "err": {},
                  "uuid": "c9e7e870-11d5-42a2-a3b8-9b2f29e7b52e",
                  "parentUUID": "6d158251-b122-4f81-930b-0eaa64178d86",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "case5 - missing payment_method",
                  "fullTitle": "suite mandatory testing -- test case5 - missing payment_method",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var bank = new Bank();\nbank.update((it) => {\n    delete it.payment_method\n})\nDriver.call(bank,\n    (statusCode, response) => {\n        assert.strictEqual(statusCode, 400)\n        assert.strictEqual(response.error, \"payment_method is required\")\n    }, (err) => { err ? done(err) : done() }\n)",
                  "err": {},
                  "uuid": "a2607577-9469-473d-9d7d-497469eb0e90",
                  "parentUUID": "6d158251-b122-4f81-930b-0eaa64178d86",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "case6 - missing swift_code when payment_method is SWIFT ",
                  "fullTitle": "suite mandatory testing -- test case6 - missing swift_code when payment_method is SWIFT ",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var bank = new Bank();\nbank.update((it) => {\n    it.payment_method = 'SWIFT'\n    delete it.swift_code\n})\nDriver.call(bank,\n    (statusCode, response) => {\n        assert.strictEqual(statusCode, 400)\n        assert.strictEqual(response.error, \"swift_code is required\")\n    }, (err) => { err ? done(err) : done() }\n)",
                  "err": {},
                  "uuid": "1f4e8fa9-7ebb-4a4e-a996-ccbeb6f68b63",
                  "parentUUID": "6d158251-b122-4f81-930b-0eaa64178d86",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "case7 - missing bsb when bank_country_code is AU ",
                  "fullTitle": "suite mandatory testing -- test case7 - missing bsb when bank_country_code is AU ",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var bank = new Bank();\nbank.update((it) => {\n    it.bank_country_code = 'AU'\n    delete it.bsb\n    it.account_name = '1234677'\n    it.swift_code = 'ICBCAUBJ'\n    it.account_number = '123456'\n})\nDriver.call(bank,\n    (statusCode, response) => {\n        assert.strictEqual(statusCode, 400)\n        assert.strictEqual(response.error, \"bsb is required\")\n    }, (err) => { err ? done(err) : done() }\n)",
                  "err": {},
                  "uuid": "ea917524-3943-4685-bbdc-0fa9c5eb1757",
                  "parentUUID": "6d158251-b122-4f81-930b-0eaa64178d86",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "case8 - missing aba when bank_country_code is US ",
                  "fullTitle": "suite mandatory testing -- test case8 - missing aba when bank_country_code is US ",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var bank = new Bank();\nbank.update((it) => {\n    it.bank_country_code = 'US'\n    delete it.aba\n})\nDriver.call(bank,\n    (statusCode, response) => {\n        assert.strictEqual(statusCode, 400)\n        assert.strictEqual(response.error, \"aba is required\")\n    }, (err) => { err ? done(err) : done() }\n)",
                  "err": {},
                  "uuid": "fdb02bad-57c7-4016-a03e-aa6bb2233dcb",
                  "parentUUID": "6d158251-b122-4f81-930b-0eaa64178d86",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1fc10a13-18c6-4036-82ed-48b3e6e1bf7e",
                "8838eb2a-09ed-43c4-918e-acbe2de5d7fe",
                "c9e7e870-11d5-42a2-a3b8-9b2f29e7b52e",
                "a2607577-9469-473d-9d7d-497469eb0e90",
                "1f4e8fa9-7ebb-4a4e-a996-ccbeb6f68b63",
                "ea917524-3943-4685-bbdc-0fa9c5eb1757",
                "fdb02bad-57c7-4016-a03e-aa6bb2233dcb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 52,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3e1d31c1-f859-412b-a644-4fb77467c98b",
              "title": "length testing -- test",
              "fullFile": "/Users/zhoushuanghua/ZackProjects/Mocha/test/test.js",
              "file": "/test/test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "case1 - account name: mandatory, any character, length from 2 to 10 -- short than 2",
                  "fullTitle": "suite length testing -- test case1 - account name: mandatory, any character, length from 2 to 10 -- short than 2",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var bank = new Bank();\nbank.update((it) => {\n    it.account_name = '1'\n})\nDriver.call(bank,\n    (statusCode, response) => {\n        assert.strictEqual(statusCode, 400)\n        assert.strictEqual(response.error, \"account_name length should be from 2 to 10\")\n    }, (err) => { err ? done(err) : done() }\n)",
                  "err": {},
                  "uuid": "4b8ff45a-7760-44fb-a771-1e58609b80a2",
                  "parentUUID": "3e1d31c1-f859-412b-a644-4fb77467c98b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "case2 - account name: mandatory, any character, length from 2 to 10 -- longer than 10",
                  "fullTitle": "suite length testing -- test case2 - account name: mandatory, any character, length from 2 to 10 -- longer than 10",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var bank = new Bank();\nbank.update((it) => {\n    it.account_name = '12345678901'\n})\nDriver.call(bank,\n    (statusCode, response) => {\n        assert.strictEqual(statusCode, 400)\n        assert.strictEqual(response.error, \"account_name length should be from 2 to 10\")\n    }, (err) => { err ? done(err) : done() }\n)",
                  "err": {},
                  "uuid": "89bebe52-abe3-45ef-bf52-8b3840c0aed1",
                  "parentUUID": "3e1d31c1-f859-412b-a644-4fb77467c98b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "case3 - account name: mandatory, any character, length from 2 to 10 -- equal to 10",
                  "fullTitle": "suite length testing -- test case3 - account name: mandatory, any character, length from 2 to 10 -- equal to 10",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var bank = new Bank();\nbank.update((it) => {\n    it.account_name = '1234567890'\n})\nDriver.call(bank,\n    (statusCode, response) => {\n        assert.strictEqual(statusCode, 200)\n        assert.strictEqual(response.success, \"Bank details saved\")\n    }, (err) => { err ? done(err) : done() }\n)",
                  "err": {},
                  "uuid": "d7ed7636-d2af-43b6-b45a-447028bdb431",
                  "parentUUID": "3e1d31c1-f859-412b-a644-4fb77467c98b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "case4 - account name: mandatory, any character, length from 2 to 10 -- equal to 2",
                  "fullTitle": "suite length testing -- test case4 - account name: mandatory, any character, length from 2 to 10 -- equal to 2",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var bank = new Bank();\nbank.update((it) => {\n    it.account_name = '12'\n})\nDriver.call(bank,\n    (statusCode, response) => {\n        assert.strictEqual(statusCode, 200)\n        assert.strictEqual(response.success, \"Bank details saved\")\n    }, (err) => { err ? done(err) : done() }\n)",
                  "err": {},
                  "uuid": "39127d9e-a22f-46e9-b9c7-cc6956ae1117",
                  "parentUUID": "3e1d31c1-f859-412b-a644-4fb77467c98b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "case５ -　bsb 6 characters when bank_country_code is AU ",
                  "fullTitle": "suite length testing -- test case５ -　bsb 6 characters when bank_country_code is AU ",
                  "timedOut": false,
                  "duration": 30,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var bank = new Bank();\nbank.update((it) => {\n    it.bank_country_code = 'AU'\n    it.bsb = '123456'\n    it.account_name = '1234677'\n    it.swift_code = 'ICBCAUBJ'\n    it.account_number = '1234567'\n})\nDriver.call(bank,\n    (statusCode, response) => {\n        assert.strictEqual(statusCode, 200)\n        assert.strictEqual(response.success, \"Bank details saved\")\n    }, (err) => { err ? done(err) : done() }\n)",
                  "err": {},
                  "uuid": "35303b76-d586-4af9-848a-fc3c274bfe7d",
                  "parentUUID": "3e1d31c1-f859-412b-a644-4fb77467c98b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "case6 - aba 9 characters when bank_country_code is US ",
                  "fullTitle": "suite length testing -- test case6 - aba 9 characters when bank_country_code is US ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var bank = new Bank();\nbank.update((it) => {\n    it.bank_country_code = 'US'\n    it.aba = '123456789'\n})\nDriver.call(bank,\n    (statusCode, response) => {\n        assert.strictEqual(statusCode, 200)\n        assert.strictEqual(response.success, \"Bank details saved\")\n    }, (err) => { err ? done(err) : done() }\n)",
                  "err": {},
                  "uuid": "f75b42c8-24d3-4b9a-ba4e-d087d02c16d3",
                  "parentUUID": "3e1d31c1-f859-412b-a644-4fb77467c98b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "case７ -　bsb not 6 characters when bank_country_code is AU ",
                  "fullTitle": "suite length testing -- test case７ -　bsb not 6 characters when bank_country_code is AU ",
                  "timedOut": false,
                  "duration": 28,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var bank = new Bank();\nbank.update((it) => {\n    it.bank_country_code = 'AU'\n    it.bsb = '1234567'\n    it.account_name = '1234677'\n    it.swift_code = 'ICBCAUBJ'\n    it.account_number = '1234567'\n})\nDriver.call(bank,\n    (statusCode, response) => {\n        assert.strictEqual(statusCode, 400)\n        assert.strictEqual(response.error.indexOf(\"size should be 6\") >= 0, true)\n    }, (err) => { err ? done(err) : done() }\n)",
                  "err": {},
                  "uuid": "a157cac0-a5b9-4dff-9bd8-afb908ba2150",
                  "parentUUID": "3e1d31c1-f859-412b-a644-4fb77467c98b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "case８ - aba not 9 characters when bank_country_code is US ",
                  "fullTitle": "suite length testing -- test case８ - aba not 9 characters when bank_country_code is US ",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var bank = new Bank();\nbank.update((it) => {\n    it.bank_country_code = 'US'\n    it.aba = '1234567891'\n})\nDriver.call(bank,\n    (statusCode, response) => {\n        assert.strictEqual(statusCode, 400)\n        assert.strictEqual(response.error.indexOf(\"size should be 9\") >= 0, true)\n    }, (err) => { err ? done(err) : done() }\n)",
                  "err": {},
                  "uuid": "6168f36a-c700-4c3e-948e-634beb95051c",
                  "parentUUID": "3e1d31c1-f859-412b-a644-4fb77467c98b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "case9 - Length of account_number should be between 7 and 11 when bank_country_code is US ",
                  "fullTitle": "suite length testing -- test case9 - Length of account_number should be between 7 and 11 when bank_country_code is US ",
                  "timedOut": false,
                  "duration": 18,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var bank = new Bank();\nbank.update((it) => {\n    it.bank_country_code = 'US'\n    it.account_number = '1231231231231231213123123123132123132131asdfasdfasdfasdfasdfsdf'\n})\nDriver.call(bank,\n    (statusCode, response) => {\n        assert.strictEqual(statusCode, 400)\n        assert.strictEqual(response.error,\"Length of account_number should be between 7 and 11 when bank_country_code is 'US'\")\n    }, (err) => { err ? done(err) : done() }\n)",
                  "err": {},
                  "uuid": "1356d647-7fa0-4dae-a796-1756ef60fe7f",
                  "parentUUID": "3e1d31c1-f859-412b-a644-4fb77467c98b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4b8ff45a-7760-44fb-a771-1e58609b80a2",
                "89bebe52-abe3-45ef-bf52-8b3840c0aed1",
                "d7ed7636-d2af-43b6-b45a-447028bdb431",
                "39127d9e-a22f-46e9-b9c7-cc6956ae1117",
                "35303b76-d586-4af9-848a-fc3c274bfe7d",
                "f75b42c8-24d3-4b9a-ba4e-d087d02c16d3",
                "a157cac0-a5b9-4dff-9bd8-afb908ba2150",
                "6168f36a-c700-4c3e-948e-634beb95051c",
                "1356d647-7fa0-4dae-a796-1756ef60fe7f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 145,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4cb79742-ad2b-4a21-9e8f-477f71443694",
              "title": "vocabulary testing -- test",
              "fullFile": "/Users/zhoushuanghua/ZackProjects/Mocha/test/test.js",
              "file": "/test/test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "case1 - payment_method should be either LOCAL or SWIFT, not local or swift",
                  "fullTitle": "suite vocabulary testing -- test case1 - payment_method should be either LOCAL or SWIFT, not local or swift",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var bank = new Bank();\nbank.update((it) => {\n    it.payment_method = 'test'\n})\nDriver.call(bank,\n    (statusCode, response) => {\n        assert.strictEqual(statusCode, 400)\n        assert.strictEqual(response.error, \"payment_method either be LOCAL or SWIFT\")\n    }, (err) => { err ? done(err) : done() }\n)",
                  "err": {},
                  "uuid": "125188c4-59fe-4059-b2b6-6565ff76d606",
                  "parentUUID": "4cb79742-ad2b-4a21-9e8f-477f71443694",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "case2 - payment_method should be either LOCAL or SWIFT. LOCAL ",
                  "fullTitle": "suite vocabulary testing -- test case2 - payment_method should be either LOCAL or SWIFT. LOCAL ",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var bank = new Bank();\nbank.update((it) => {\n    it.payment_method = 'LOCAL'\n})\nDriver.call(bank,\n    (statusCode, response) => {\n        assert.strictEqual(statusCode, 200)\n        assert.strictEqual(response.success, \"Bank details saved\")\n    }, (err) => { err ? done(err) : done() }\n)",
                  "err": {},
                  "uuid": "09f8927c-5451-4010-8aa9-892345944185",
                  "parentUUID": "4cb79742-ad2b-4a21-9e8f-477f71443694",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "case3 - payment_method should be either LOCAL or SWIFT. SWIFT ",
                  "fullTitle": "suite vocabulary testing -- test case3 - payment_method should be either LOCAL or SWIFT. SWIFT ",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var bank = new Bank();\nbank.update((it) => {\n    it.payment_method = 'SWIFT'\n})\nDriver.call(bank,\n    (statusCode, response) => {\n        assert.strictEqual(statusCode, 200)\n        assert.strictEqual(response.success, \"Bank details saved\")\n    }, (err) => { err ? done(err) : done() }\n)",
                  "err": {},
                  "uuid": "fec9a1f2-5cc5-4020-9fe0-e3679ef2eec9",
                  "parentUUID": "4cb79742-ad2b-4a21-9e8f-477f71443694",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "case4 - bank_country_code can be one of US, AU, CN.  -- US",
                  "fullTitle": "suite vocabulary testing -- test case4 - bank_country_code can be one of US, AU, CN.  -- US",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var bank = new Bank();\nbank.update((it) => {\n    it.bank_country_code = 'US'\n})\nDriver.call(bank,\n    (statusCode, response) => {\n        assert.strictEqual(statusCode, 200)\n        assert.strictEqual(response.success, \"Bank details saved\")\n    }, (err) => { err ? done(err) : done() }\n)",
                  "err": {},
                  "uuid": "8f279585-df03-418d-8dcc-a4c1a7a4942c",
                  "parentUUID": "4cb79742-ad2b-4a21-9e8f-477f71443694",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "case5 - bank_country_code can be one of US, AU, CN.  -- AU -- account number not fullfilled",
                  "fullTitle": "suite vocabulary testing -- test case5 - bank_country_code can be one of US, AU, CN.  -- AU -- account number not fullfilled",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var bank = new Bank();\nbank.update((it) => {\n    it.bank_country_code = 'AU'\n})\nDriver.call(bank,\n    (statusCode, response) => {\n        assert.strictEqual(statusCode, 400)\n        assert.strictEqual(response.error, \"for AU, account number is 6-9 character long\")\n    }, (err) => { err ? done(err) : done() }\n)",
                  "err": {},
                  "uuid": "6c54ff8a-6626-4d6b-8634-e7aed3e2b2bd",
                  "parentUUID": "4cb79742-ad2b-4a21-9e8f-477f71443694",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "case6 - bank_country_code can be one of US, AU, CN.  -- CN -- The swift code is not valid for the given bank country code: US",
                  "fullTitle": "suite vocabulary testing -- test case6 - bank_country_code can be one of US, AU, CN.  -- CN -- The swift code is not valid for the given bank country code: US",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var bank = new Bank();\nbank.update((it) => {\n    it.bank_country_code = 'CN'\n    it.account_number = '1234566788'\n})\nDriver.call(bank,\n    (statusCode, response) => {\n        assert.strictEqual(statusCode, 400)\n        assert.strictEqual(response.error, \"The swift code is not valid for the given bank country code: US\")\n    }, (err) => { err ? done(err) : done() }\n)",
                  "err": {},
                  "uuid": "a2280737-3865-4072-8a0e-5d0cff5f2e1c",
                  "parentUUID": "4cb79742-ad2b-4a21-9e8f-477f71443694",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "125188c4-59fe-4059-b2b6-6565ff76d606",
                "09f8927c-5451-4010-8aa9-892345944185",
                "fec9a1f2-5cc5-4020-9fe0-e3679ef2eec9",
                "8f279585-df03-418d-8dcc-a4c1a7a4942c",
                "6c54ff8a-6626-4d6b-8634-e7aed3e2b2bd",
                "a2280737-3865-4072-8a0e-5d0cff5f2e1c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 52,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "73243433-c5f0-465e-a324-c60707ccd5a9",
              "title": "exploring testing -- test",
              "fullFile": "/Users/zhoushuanghua/ZackProjects/Mocha/test/test.js",
              "file": "/test/test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "case1 - too long account name",
                  "fullTitle": "suite exploring testing -- test case1 - too long account name",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var bank = new Bank();\nbank.update((it) => {\n    it.account_name = \"123123123adf!@#SDFDV$@$#%#$DSASD@!#Dvdzafgadfgadfgadsfa1    aqe rrq            56357adsv\"\n})\nDriver.call(bank,\n    (statusCode, response) => {\n        assert.strictEqual(statusCode, 400)\n        assert.strictEqual(response.error, \"account_name length should be from 2 to 10\")\n    }, (err) => { err ? done(err) : done() }\n)",
                  "err": {},
                  "uuid": "5aed8f4b-60b8-4a35-a9d6-aab6767cb961",
                  "parentUUID": "73243433-c5f0-465e-a324-c60707ccd5a9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "case2 - empty account name",
                  "fullTitle": "suite exploring testing -- test case2 - empty account name",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var bank = new Bank();\nbank.update((it) => {\n    it.account_name = \"\"\n})\nDriver.call(bank,\n    (statusCode, response) => {\n        assert.strictEqual(statusCode, 400)\n        assert.strictEqual(response.error, \"account_name length should be from 2 to 10\")\n    }, (err) => { err ? done(err) : done() }\n)",
                  "err": {},
                  "uuid": "93c249c9-447f-4f01-b22f-a158a9b666b3",
                  "parentUUID": "73243433-c5f0-465e-a324-c60707ccd5a9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5aed8f4b-60b8-4a35-a9d6-aab6767cb961",
                "93c249c9-447f-4f01-b22f-a158a9b666b3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 14,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.3.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.2"
    },
    "marge": {
      "options": null,
      "version": "5.2.0"
    }
  }
}